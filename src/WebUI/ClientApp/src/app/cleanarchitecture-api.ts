/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.5.0 (NJsonSchema v10.1.7.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IGetNumberOfSoldArticlesPerDayClient {
    getNumberOfSoldArticlesPerDay(date: Date): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class GetNumberOfSoldArticlesPerDayClient implements IGetNumberOfSoldArticlesPerDayClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getNumberOfSoldArticlesPerDay(date: Date): Observable<number> {
        let url_ = this.baseUrl + "/api/GetNumberOfSoldArticlesPerDay/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent(date ? "" + date.toJSON() : "null")); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNumberOfSoldArticlesPerDay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNumberOfSoldArticlesPerDay(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetNumberOfSoldArticlesPerDay(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

export interface IGetRevenueGroupedByArticlesClient {
    getRevenueGroupedByArticles(): Observable<RevenueArticleVm>;
}

@Injectable({
    providedIn: 'root'
})
export class GetRevenueGroupedByArticlesClient implements IGetRevenueGroupedByArticlesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getRevenueGroupedByArticles(): Observable<RevenueArticleVm> {
        let url_ = this.baseUrl + "/api/GetRevenueGroupedByArticles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRevenueGroupedByArticles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRevenueGroupedByArticles(<any>response_);
                } catch (e) {
                    return <Observable<RevenueArticleVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<RevenueArticleVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetRevenueGroupedByArticles(response: HttpResponseBase): Observable<RevenueArticleVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RevenueArticleVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RevenueArticleVm>(<any>null);
    }
}

export interface IGetTotalRevenuePerDayClient {
    getTotalRevenuePerDay(date: Date): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class GetTotalRevenuePerDayClient implements IGetTotalRevenuePerDayClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getTotalRevenuePerDay(date: Date): Observable<number> {
        let url_ = this.baseUrl + "/api/GetTotalRevenuePerDay/{date}";
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent(date ? "" + date.toJSON() : "null")); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTotalRevenuePerDay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTotalRevenuePerDay(<any>response_);
                } catch (e) {
                    return <Observable<number>><any>_observableThrow(e);
                }
            } else
                return <Observable<number>><any>_observableThrow(response_);
        }));
    }

    protected processGetTotalRevenuePerDay(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<number>(<any>null);
    }
}

export interface ISaleItemsClient {
    create(command: CreateSaleItemCommand): Observable<SaleItemDto>;
    get(): Observable<SalesVm>;
}

@Injectable({
    providedIn: 'root'
})
export class SaleItemsClient implements ISaleItemsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateSaleItemCommand): Observable<SaleItemDto> {
        let url_ = this.baseUrl + "/api/SaleItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<SaleItemDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<SaleItemDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<SaleItemDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SaleItemDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SaleItemDto>(<any>null);
    }

    get(): Observable<SalesVm> {
        let url_ = this.baseUrl + "/api/SaleItems";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SalesVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<SalesVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SalesVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SalesVm>(<any>null);
    }
}

export interface IStaticsClient {
    getRevenueGroupedByArticles(): Observable<RevenueArticleVm>;
}

@Injectable({
    providedIn: 'root'
})
export class StaticsClient implements IStaticsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getRevenueGroupedByArticles(): Observable<RevenueArticleVm> {
        let url_ = this.baseUrl + "/api/Statics";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRevenueGroupedByArticles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRevenueGroupedByArticles(<any>response_);
                } catch (e) {
                    return <Observable<RevenueArticleVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<RevenueArticleVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetRevenueGroupedByArticles(response: HttpResponseBase): Observable<RevenueArticleVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RevenueArticleVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RevenueArticleVm>(<any>null);
    }
}

export class RevenueArticleVm implements IRevenueArticleVm {
    revenueArticles?: RevenueArticleDto[] | undefined;

    constructor(data?: IRevenueArticleVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["revenueArticles"])) {
                this.revenueArticles = [] as any;
                for (let item of _data["revenueArticles"])
                    this.revenueArticles!.push(RevenueArticleDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RevenueArticleVm {
        data = typeof data === 'object' ? data : {};
        let result = new RevenueArticleVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.revenueArticles)) {
            data["revenueArticles"] = [];
            for (let item of this.revenueArticles)
                data["revenueArticles"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRevenueArticleVm {
    revenueArticles?: RevenueArticleDto[] | undefined;
}

export class RevenueArticleDto implements IRevenueArticleDto {
    articleNumber?: string | undefined;
    revenueInEuro?: number;

    constructor(data?: IRevenueArticleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleNumber = _data["articleNumber"];
            this.revenueInEuro = _data["revenueInEuro"];
        }
    }

    static fromJS(data: any): RevenueArticleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RevenueArticleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleNumber"] = this.articleNumber;
        data["revenueInEuro"] = this.revenueInEuro;
        return data; 
    }
}

export interface IRevenueArticleDto {
    articleNumber?: string | undefined;
    revenueInEuro?: number;
}

export class SaleItemDto implements ISaleItemDto {
    id?: string;
    articleNumber?: string | undefined;
    salesPriceInEuro?: number;
    dateTimeOffset?: Date;

    constructor(data?: ISaleItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.articleNumber = _data["articleNumber"];
            this.salesPriceInEuro = _data["salesPriceInEuro"];
            this.dateTimeOffset = _data["dateTimeOffset"] ? new Date(_data["dateTimeOffset"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SaleItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new SaleItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["articleNumber"] = this.articleNumber;
        data["salesPriceInEuro"] = this.salesPriceInEuro;
        data["dateTimeOffset"] = this.dateTimeOffset ? this.dateTimeOffset.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ISaleItemDto {
    id?: string;
    articleNumber?: string | undefined;
    salesPriceInEuro?: number;
    dateTimeOffset?: Date;
}

export class CreateSaleItemCommand implements ICreateSaleItemCommand {
    articleNumber?: string | undefined;
    salesPriceInEuro?: number;
    dateTimeOffset?: Date | undefined;

    constructor(data?: ICreateSaleItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleNumber = _data["articleNumber"];
            this.salesPriceInEuro = _data["salesPriceInEuro"];
            this.dateTimeOffset = _data["dateTimeOffset"] ? new Date(_data["dateTimeOffset"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateSaleItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSaleItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleNumber"] = this.articleNumber;
        data["salesPriceInEuro"] = this.salesPriceInEuro;
        data["dateTimeOffset"] = this.dateTimeOffset ? this.dateTimeOffset.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateSaleItemCommand {
    articleNumber?: string | undefined;
    salesPriceInEuro?: number;
    dateTimeOffset?: Date | undefined;
}

export class SalesVm implements ISalesVm {
    lists?: SaleItemDto[] | undefined;

    constructor(data?: ISalesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(SaleItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesVm {
        data = typeof data === 'object' ? data : {};
        let result = new SalesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISalesVm {
    lists?: SaleItemDto[] | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}